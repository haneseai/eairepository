

CREATE COMPUTE MODULE Split_Logic_Flow_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 --CALL CopyMessageHeaders();
		 --CALL CopyEntireMessage();
		 
		 DECLARE Store_Count INTEGER CARDINALITY(InputRoot.DFDL.Line_by_Line.Line[]);
		 DECLARE Time_St CHARACTER  CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyyMMddHHmmss');
	--	 DECLARE Decide_Hdr_itm CHARACTER;
		 
		 FOR Lines AS InputRoot.DFDL.Line_by_Line.Line[]  DO
		 	CALL CopyMessageHeaders();
		 	SET OutputRoot.BLOB.BLOB = CAST(Lines AS BLOB CCSID 1208);
		 	
	--	  SET Decide_Hdr_itm = RIGHT(OutputRoot.BLOB.BLOB,2);
--		    SET OutputLocalEnvironment.Destination.File.Directory = '/app/wricef/sd/data/xi/ib/pos/';
--           SET OutputLocalEnvironment.Destination.File.Directory = '/app/pos/ToPOS';
--		    SET OutputLocalEnvironment.Destination.File.Name      = LEFT(CAST(Lines AS CHARACTER),4)||'_'||Time_St||'.txt';
		 	Propagate to terminal 'out'; 
		 END FOR;
		 
		  SET OutputRoot.MQMD.Priority=9; 
		  SET OutputRoot.MQMD.Format = MQFMT_STRING; 
		  SET OutputRoot.MQMD.Feedback=MQFB_APPL_LAST;
		  Propagate to terminal 'out'; 
		  
--		DECLARE OutFileName,OutFileLoc CHARACTER '';
--	    SET OutFileName = CAST(Store_Count AS CHARACTER)||'Files';
--	    SET OutFileLoc  = '/app/pos/ToPOS';
----	    SET OutFileLoc  = '/app/wricef/sd/data/xi/ib/pos/';
--		SET OutputRoot.XMLNSC.Email.Email_Type  = 'Success';
--		SET OutputRoot.XMLNSC.Email.OutFileName = OutFileName;
--		SET OutputRoot.XMLNSC.Email.OutFileLoc  = OutFileLoc;
--		PROPAGATE TO LABEL 'Email';
--		    CALL CopyMessageHeaders();
--		    SET OutputRoot.MQMD.Priority=9; 
--		    SET OutputRoot.MQMD.Format = MQFMT_STRING; 
--		    SET OutputRoot.MQMD.Feedback=MQFB_APPL_LAST;
--		    SET OutputRoot."BLOB"."BLOB" = CAST(('<FILEPREFIX>' || 'ALLRP.txt') AS BLOB CCSID InputRoot.MQMD.CodedCharSetId);
--		    Propagate to terminal 'out';

--           DECLARE a CHARACTER;
--           set a = InputRoot.DFDL.Line_by_Line.Line[25];
--           SET OutputRoot.XMLNSC.a = a;
--           Propagate to terminal 'out';
		 
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
