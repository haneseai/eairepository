

CREATE COMPUTE MODULE Split_Logic_Flow_Compute1
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE errorNumber INTEGER;
		DECLARE errorText CHAR '';
		DECLARE exceptionName CHAR;
		DECLARE messageCatalog CHAR;
		DECLARE exceptionSeverity CHAR;
		DECLARE nodeLabel CHAR;
		DECLARE mailBody CHARACTER;
		DECLARE CRLF CHAR;

		CALL ParseExceptionList(InputExceptionList, exceptionName, errorNumber, errorText,
		messageCatalog, exceptionSeverity, nodeLabel);
				
	/*   SET OutputRoot.XMLNSC.Email.Email_Type = 'Failed';
	   SET OutputRoot.XMLNSC.Email.InFileName = 'PoFile';
	   SET OutputRoot.XMLNSC.Email.InFileLoc  = '/app/pos/ToPOS';	   
	   SET OutputRoot.XMLNSC.Email.Error = errorText;
	   PROPAGATE TO LABEL 'Email'; */

		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE PROCEDURE ParseExceptionList(IN InputTree reference, OUT exceptionName CHAR, OUT messageNumber INT,
	IN messageText CHAR, OUT messageCatalog CHAR, OUT exceptionSeverity CHAR,
	OUT nodeLabel CHAR)

	BEGIN
		DECLARE ptrException reference to InputTree.*[1];
		set messageText = '';
		DECLARE Parse_Exception CHARACTER '';
		-- keep looping while the moves to the child of exception list work
		WHILE lastmove(ptrException) DO
			DECLARE CRLF CHAR  CAST(x'0d0a' AS CHAR CCSID 1208);
			-- store the current values
			-- IF FIELDNAME(ptrException) IS NOT NULL AND FIELDNAME(ptrException) <> 'Text' THEN
			-- SET exceptionName = FIELDNAME(ptrException);
			-- END IF;
                  
			IF ptrException.Number IS NOT NULL THEN
				SET exceptionName = FIELDNAME(ptrException);
				SET messageNumber = ptrException.Number;
			END IF;                 

			IF ptrException.Severity IS NOT NULL THEN
				SET exceptionSeverity = ptrException.Severity;
			END IF; 

			IF ptrException.Label IS NOT NULL AND ptrException.Label <> '' THEN
				SET nodeLabel = ptrException.Label;
			END IF;
			
			IF ptrException.ParserException.ParserException.Insert[5].Text IS NOT NULL THEN
			   SET Parse_Exception = ptrException.ParserException.ParserException.Insert[5].Text;
			END IF;
            
			IF ptrException.Text IS NOT NULL THEN
				SET messageText = messageText||CRLF||ptrException.Text;
			END IF;                 
			
			-- now move to the last child which should be the next exceptionlist                  
			MOVE ptrException LASTCHILD;
			
		END WHILE;
		SET messageText = Parse_Exception || CAST(x'0d0a' AS CHAR CCSID 1208) || messageText;
		
		  SET OutputRoot.XMLNSC.Email.Email_Type = 'Failed';
	   SET OutputRoot.XMLNSC.Email.InFileName = 'PoFile';
	   SET OutputRoot.XMLNSC.Email.InFileLoc  = '/app/pos/FrmPOS';	   
	   SET OutputRoot.XMLNSC.Email.Error = messageText;
	   PROPAGATE TO LABEL 'Email';  
		PROPAGATE TO  TERMINAL 'out';
	END;


END MODULE;
